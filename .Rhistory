my.fun<-function(x,y,color=1,pch=3,...)
{
plot(x,y,col=color,pch=pch,...)
}
my.fun(-5:5,(-5:5)^2)
my.fun<-function(x,y,color=1,pch=3,...)
{
plot(x,y,col=color,pch=pch,...)
}
my.fun(-5:5,(-5:5)^2,type=1)
my.fun<-function(x,y,color=1,pch=3,...)
{
plot(x,y,col=color,pch=pch,...)
}
my.fun(-5:5,(-5:5)^2,type=1,...)
ls()
traceback()
# lecture 17R
my.fun<-function(x,y,color=1,pch=3,...)
{
plot(x,y,col=color,pch=pch,...)
}
my.fun(-5:5,(-5:5)^2,type=1)
traceback()
print("heel")
tt<-1:4
print(tt
)
ls()
n<=rnorm(20,0,1)
n<-rnorm(20,0,1)
print(n)
n<-rnorm(20,10,20)
print(n)
mat<-matrix(n,2)
print(mat)
mat<-matrix(n,5,4)
print(mat)
?rep
a1 <- rep(1)
a1
a1 <- rep([1 2 3],7)
a1 <- rep({1 2 3},7)
a1 <- rep((1 2 3),7)
a1 <- rep((1,2,3),7)
a1 <- rep(2,7)
a1
a1 <- rep(sqrt(2),2)
a1
a2=2
identical(a1*a1,a2)
a1
a2
a1*a1
a1*a1==a2
a <- sqrt(2)
all.equals(a*a,2)
all.equal(a*a,2)
a1
a2
all.equal(a1*a1,a2)
lengths(a1)
length(a1)
vector(mode="logical",length=1)
vector(mode="logical",length=0)
as.vector(a1,mode="any")
is.vector(a1,mode="any")
is.vector(a2,mode="any")
?as.vector
is.vector(a2,mode="logical")
is.vector(a2,mode="numeric")
a3 <- c(1,2,3)
a3
is.vector(a3,mode="integer")
is.vector(a3,mode="any")
a4=c("any","bug","deal")
a4
print(a4)
is.vector(a4,"character")
as.vector(a4,"integer")
a4
a5 <- as.vector(a4,"integer")
a5
a4
names(a4)
names(a4) <- c('dog','cat','duck')
a4
v1 <- c(dog='woof',cat='miaow')
v1
names(a4)
v1 <- c(1,2,3;4,5,6)
v1 <- c(1,2,3,4,5,6)
v1[2]
v[5]
v1[5]
v1[3:4]
v1[4:2]
install.packages("DMwR")
a
a3
a3=3
a3
a3->3
install.packages('RMySQL')
installed.packages()
library()
old.packages()
update.packages()
my.fun
my.fun(1:4,11:14)
x<-3
x
i<-1:19
i
i<=i'
c
df
df
i
i<-inv(i)
help inv
i=t(i)
i
i=(1:8)+4
i
i<- (1:8).*8
i<- (1:8)*8
i
i<- (1:8)*(5:8)
i
i<- (1:8).*(5:8)
i<- (1:8)*t(5:8)
i<- (1:8)*t(1:8)
i
ls
ls()
a.mode
length(i)
v<-c(4,5,6,7)
v
mode(v)
x<-vector()
x[3]=4
x
x<-factor(c('f','m','f'))
x
table(x)
a=1:0.1:2
a
a=seq(1,2,0.1)
a
mysql -h dbm2.itc.virginia.edu -u ps3ke -p
mysql
plot(a)
plot.ts(n)
install.packages("dlm")
library("dlm", lib.loc="C:/Users/Peng/Documents/R/win-library/2.14")
plot.ts(n,col="r")
plot.ts(n,col="red")
plot.ts(n,col="green")
plot.ts(n,col="green",xlab="Dan")
plot.ts(n,col="green",xlab="Dan",cex.lab=1.5)
plot(n,col="green",xlab="Dan",cex.lab=1.5)
plot(n,col="green",xlab="Dan",cex.lab=4)
install.packages("KernSmooth")
available.packages(0)
available.packages()
head(available.packages(),5)
library(KernSmooth)
getwd()
read.csv
dir()
dir()
x <- 1
print (x)
x <- "hello"
print(x)
x <- 'hello'
print x
print(x)
print(x)
x
x <- 1:20
x
x <- c(1,3,4)
x
x <- vector(0)
x <- vector()
x
x<-1l
x<-1L
x
x <- 1/Inf
x
x <- 1+NaN
x
x <- 1/NaN
x
1+Inf
x <- vector(c(1,2))
x <- vector(1,2)
Inf + (-Inf)
attributes(x)
x
x <- vector()
attributes(x)
x <- c(0.5,"a")
x
x <- c(TRUE,2)
x
x <- c(TRUE,'a')
x
x <- "a"
as.numeric(x)
x
y <- as.character(x)
y
x
x <- TRUE
x
attributes(x)
y <- as. numeric(x)
y <- as.numeric(x)
y
x <- list(1,"a",TRUE,1+4i)
attributes(x)
x
x(1)
x[1]
x[2]
x[[1]]
x[[2]]
x[[[3]]]
x[[1]]
x <- c(1,3,4)
x[1]
x[2]
x[[2]]
x[[1]]
x[[[1]]]
x
x <- list(1,"a",TRUE,1+4i)
as.numeric(x)
y <- as.numeric(x)
y
x
m <- matric(nrow=2,nrow=3)
m <- matricx(nrow=2,nrow=3)
m <- matrix(nrow=2,nrow=3)
m <- matrix(nrow=2,ncol=3)
m
attributes(m)
m[2,3]
x <- 1:10
dim(x) <- c(2,3)
x
dim(x) < c(2,5)
x
dim(x) <- c(2,5)
x
dim(x) <- c(2,6)
x
dim(x) <- c(5,2)
x
x <- c(1,2,3)
dim9x
dim(x)
x
dim(x)<- c(3,1)
x
y<-c(4,5,6)
z<- cbind(x,y)
z
z<- rbind(x,y)
x
y
z
x<-1:3
y<-4:6
z<-rbind(x,y)
z
x <- factor(c("y","n","o"))
x
table(x)
x<-data.frame(foo=1:4,bar=c(t,f,t,f))
x<-data.frame(foo=1:4,bar=c('t','f','t','f'))
x
nrows(s)
nrows(x)
nrow(x)
ncol(x)
row.names(x)
col.names(x)
help read.table
? read.table
formals(read.table)
rnorm(4)
search()
x<-list(a=1:5,b=rnorm(10))
lapply(x,mean)
? runif
runif(2,0,1)
runif(5,0,10)
runif(5,0,1000)
dunif(10)
str(apply)
? apply
x
apply(x,1,mean)
apply(x$b,1,mean)
x<-matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,sum)
? quantile
apply(x,1,quantile,probs=c(0.25,0.75))
y<-apply(x,1,quantile,probs=c(0.25,0.75))
y
y<-rowMeans(x)
a<-rnorm(2*2*10)
a<-array(a,2,2,10)
a<-array(a,c(2,2,10)
)
? array
? gl
z<-gl(3,2)
z
? rnorm
x <- factor(c("y","n","o"))
x
table9x
table(x)
x<-rnorm(10)
x
f1<-gl(2,5)
f2<-gl(5,2)
interaction(f1,f2)
split(x,interaction(f1,f2))
log(-1)
mean9x
mean9x
mean9x
mean(x)
traceback()
str(mean)
debug(mean)
debug(lm)
lm(y~x)
lm(y~x)
a
a
a
a
m
m
m
h
h
?
h
str(m)
str(mat)
summary(mat)
str(str)
str(rnorm)
x<-rnorm(100,0,1)
str(x)
summary(x)
Q
q
str(x)
summary(x)
q
summary(x)
summary(x)
debug(mean)
df
setwd("C:/Users/Peng/2_RProg/rprog-data-specdata")
setwd("C:/Users/Peng/repo3/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
x<-makeCacheMatrix(matrix(c(1,2,3,4),2,2))
x.getinverse()
x$getinverse()
x$m()
cacheSolve(x)
x$getinverse()
